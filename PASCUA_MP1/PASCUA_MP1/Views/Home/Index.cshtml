@model IEnumerable<Employee>;
@{



    ViewData["Title"] = "Home Page";
    var FirstName = "Gabriel ";
    var LastName = "Montano ";
    var Email = "gdmontano@ust.edu.ph";



    int atIndex = Email.IndexOf('@');
    var username = Email.Substring(0, atIndex);
    var domain = Email.Substring(atIndex + 1);




    var SalaryPerHour = 10.00m;
    var salaryPerDay = 0.0m;
    var salaryPerMonth = 0.0m;
 



    DateTime birthday = new DateTime(1990, 5, 15); // Replace with the actual birthdate
    DateTime date = DateTime.Now;

    int age = CalculateAge(birthday);
    // Displaying the birthday

    // Function to calculate age based on a birthday
    int CalculateAge(DateTime birthdate)
    {
        DateTime currentDate = DateTime.Now;
        int age = currentDate.Year - birthdate.Year;

        // Check if the birthday has occurred this year already
        if (birthdate.Date > currentDate.AddYears(-age))
        {
            age--; // Decrement age if the birthday hasn't occurred yet this year
        }

        return age;
    }
    //=====

    var Name = "Julia ";
    var PrelimGrade = 92;

    var FinalGrade = 90;
    var SemGrade = (PrelimGrade+FinalGrade)/2;

    var TransmutedGrade = 0.0;
    var notif = "out of range";
    if (SemGrade>=96){
        TransmutedGrade = 1;
    }
    else if (SemGrade >= 94){
        TransmutedGrade = 1.25;
    }
    else if (SemGrade >= 92)
    {
        TransmutedGrade = 1.50;
    }
    else if (SemGrade >= 89)
    {
        TransmutedGrade = 1.75;
    }
    else if (SemGrade >= 87)
    {
        TransmutedGrade = 2.00;
    }
    else if (SemGrade >= 84)
    {
        TransmutedGrade = 2.25;
    }
    else if (SemGrade >= 82)
    {
        TransmutedGrade = 2.50;
    }
    else if (SemGrade >= 79)
    {
        TransmutedGrade = 2.75;
    }
    else if (SemGrade >= 75)
    {
        TransmutedGrade = 3.00;
    }
    else if (SemGrade <= 75)
    {
        TransmutedGrade = 5.00;
    }else{
    @notif
    }






}
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>JMP MP1</title>
</head>
<body class="bg-info">
<div class="text-center ">
    <h1 class="display-4">Welcome</h1>
   
    <br>
 
    <br>
    <div class="d-flex justify-content-center">
    <div class="card bg-dark text-white " style="width: 50%;">

        <div class="card-body">
            <h5 class="card-title"> A. Sample output : </h5>
            <p class="card-subtitle mb-2  text-white"> <i>Hint: get the current date and subtract to birthday to compute the age. </i><p/>
            <p class="card-text">
                I'm @FirstName @LastName and I'm  @age yrs. old<br>
            </p>
            </div>
        </div>
    </div>
    <br>
    <div class="d-flex justify-content-center">
    <div class="card bg-dark text-white " style="width: 50%;">

        <div class="card-body">
                <h5 class="card-title">   B. Sample output: </h5>
            <p class="card-subtitle mb-2  text-white"> <i>
                        Hint: use string function to extract the domain and username from email.<br>
                     
                    </i>
                <p />
            <p class="card-text">
                    Email: @Email<br>
                    Domain: @domain<br>
                    Username: @username<br>
                    <br>
                  
            </p>
            </div>
        </div>
    </div>
    <br>
    <h5 class="text-dark">C. Sample output:</h5>
    <div class="d-flex justify-content-center">

    <table class="table table-dark" style="width: 50%;">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
                <th scope="col">Status</th>
                <th scope="col">Daily Salary</th>
                <th scope="col">Monthly Salary</th>
            </tr>
        </thead>
        <tbody>
    
            @if (Model != null)
            {
                foreach (var employee in Model)
                {
                    <tr>
                        <td>@employee.Id</td>
                        <td>@employee.FirstName @employee.LastName</td>
                        <td>@employee.Email</td>
                        <td>
                            @(employee.IsTenured? "Permanent" : "Probationary")
                            @{
                                
                                Boolean IsTenured = @employee.IsTenured;
                                if (IsTenured == true)
                                {
                                    salaryPerDay = (SalaryPerHour * 8.0m) + 500.0m;
                                    salaryPerMonth = (salaryPerDay * 30.0m) + 500.0m;
                                }
                                else
                                {
                                    salaryPerDay = (SalaryPerHour * 8.0m);
                                    salaryPerMonth = (salaryPerDay * 30.0m);
                                }
                                        var salaryPerDayR = Math.Round(salaryPerDay, 2);
                                        var salaryPerMonthR = Math.Round(salaryPerMonth, 2);
                            }
                          
                        </td>
                        <td> $ @salaryPerDayR</td>
                        <td> $ @salaryPerMonthR</td>
              


                    </tr>
                }
            }
            else
            {
                <p>No data available</p>
            }
                
   
        </tbody>
    </table>
    <br>
    <br>
    </div>
    <h5 class="text-dark">D. Sample output:</h5>
    <div class="d-flex justify-content-center">
     
    <table class="table text-start table-dark table-bordered table-striped" style="width: 50%!important;">
       
        <tbody>
            <tr>
                <td>Name</td>
                <td>@Name</td>
            </tr>
            <tr>
                <td>PrelimGrade</td>
                <td>@PrelimGrade</td>
            </tr>
            <tr>
                <td>FinalGrade</td>
                <td>@FinalGrade</td>
            </tr>
            <tr>
                <td>SemGrade</td>
                <td>@SemGrade</td>
            </tr>
            <tr>
                <td>Transmuted Grade</td>
                <td>@TransmutedGrade</td>
            </tr>
        </tbody>
    </table>


    </div>
    </div>

    <br>
</div>
</body>
</html>